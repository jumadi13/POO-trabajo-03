class Cuenta:
    def __init__(self, saldo: float, tasa_anual: float):
        self._saldo = saldo
        self._tasa_anual = tasa_anual
        self._numero_consignaciones = 0
        self._numero_retiros = 0
        self._comision_mensual = 0.0

    def consignar(self, cantidad: float):
        if cantidad > 0:
            self._saldo += cantidad
            self._numero_consignaciones += 1

    def retirar(self, cantidad: float):
        if 0 < cantidad <= self._saldo:
            self._saldo -= cantidad
            self._numero_retiros += 1
        else:
          print("saldo insuficiente o cantidad  invalida")

    def calcular_interes_mensual(self):
        interes_mensual = (self._tasa_anual / 12) * self._saldo / 100
        self._saldo += interes_mensual

    def extracto_mensual(self):
        self._saldo -= self._comision_mensual
        self.calcular_interes_mensual()

    def imprimir(self):
        print(f"Saldo: ${self._saldo:.2f}")
        print(f"Tasa anual: {self._tasa_anual}%")
        print(f"Consignaciones: {self._numero_consignaciones}")
        print(f"Retiros: {self._numero_retiros}")
        print(f"ComisiÃ³n mensual: ${self._comision_mensual:.2f}")

class CuentaAhorros(Cuenta):
    def __init__(self, saldo: float, tasa_anual: float):
        super().__init__(saldo, tasa_anual)
        self._activa = saldo >= 10000

    def consignar(self, cantidad: float):
        if self._activa:
            super().consignar(cantidad)
            self._actualizar_estado()

    def retirar(self, cantidad: float):
        if self._activa:
            super().retirar(cantidad)
            self._actualizar_estado()

    def extracto_mensual(self):
        exceso_retiros = max(0, self._numero_retiros - 4)
        self._comision_mensual = exceso_retiros * 1000
        super().extracto_mensual()
        self._actualizar_estado()

    def _actualizar_estado(self):
        self._activa = self._saldo >= 10000

    def imprimir(self):
        super().imprimir()
        transacciones = self._numero_consignaciones + self._numero_retiros
        print(f"Cuenta activa: {self._activa}")
        print(f"Total transacciones: {transacciones}")
        print("-" * 25)

class CuentaCorriente(Cuenta):
    def __init__(self, saldo: float, tasa_anual: float):
        super().__init__(saldo, tasa_anual)
        self._sobregiro = 0.0

    def retirar(self, cantidad: float):
        if cantidad <= self._saldo:
            super().retirar(cantidad)
        else:
            self._sobregiro += cantidad - self._saldo
            self._saldo = 0
            self._numero_retiros += 1

    def consignar(self, cantidad: float):
        if self._sobregiro > 0:
            if cantidad > self._sobregiro:
                cantidad -= self._sobregiro
                self._sobregiro = 0
                super().consignar(cantidad)
            else:
                self._sobregiro -= cantidad
        else:
            super().consignar(cantidad)

    def imprimir(self):
        super().imprimir()
        transacciones = self._numero_consignaciones + self._numero_retiros
        print(f"Sobregiro: ${self._sobregiro:.2f}")
        print(f"Total transacciones: {transacciones}")
        print("-" * 25)

 
 
def main():
    print("------ Cuenta de Ahorros ------")
    cuenta_ahorros = CuentaAhorros(12000, 5.0)
    cuenta_ahorros.retirar(3000)
    cuenta_ahorros.retirar(1000)
    cuenta_ahorros.retirar(500)
    cuenta_ahorros.retirar(500)
    cuenta_ahorros.retirar(500)  
    cuenta_ahorros.consignar(2000)
    cuenta_ahorros.extracto_mensual()
    cuenta_ahorros.imprimir()

    print("------ Cuenta Corriente ------")
    cuenta_corriente = CuentaCorriente(5000, 4.0)
    cuenta_corriente.retirar(6000)  
    cuenta_corriente.consignar(2000)  
    cuenta_corriente.extracto_mensual()
    cuenta_corriente.imprimir()

if __name__ == "__main__":
    main()
